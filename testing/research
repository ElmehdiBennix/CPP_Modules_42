
----> whats an orthodox canonical form :
*********************************************************************************************************************************************************************************

In the context of C++ programming, the term "Orthodox Canonical Form" refers to a specific design pattern for classes. It is also known as the "Big Four". The Orthodox Canonical Class Form consists of the following four member functions:

1. Constructor: This is used to initialize the objects of the class. It is automatically invoked when an object is created.
2. Destructor: This is used to clean up and free resources that were acquired by the object during its lifetime. It is automatically invoked when an object is destroyed.
3. Copy Constructor: This is used to create a new object as a copy of an existing object.
4. Assignment Operator: This is used to copy the values from one object to another existing object.

----> There are several ways to represent numbers in computer systems, including:
*********************************************************************************************************************************************************************************

Binary Representation: This is the most basic form of number representation in computers, where numbers are represented as a sequence of 0s and 1s.
Decimal Representation: Some systems also support decimal representation, which is more intuitive for human users.
Hexadecimal Representation: This is often used in programming and debugging because it's more compact than binary but can still be directly mapped to binary.
Fixed-Point Representation: This is used when a fixed number of digits after the decimal point is needed. It's simpler and faster than floating-point representation but has a limited range and can lose precision.
Floating-Point Representation: This is used for real numbers and can represent a very large range of values. However, it's more complex and slower than fixed-point representation and can introduce rounding errors.
Complement Representation: This is used for representing negative numbers. The two's complement representation is most commonly used.
Scientific Notation: This is used for representing very large or very small numbers. It's similar to floating-point representation but uses a base number and an exponent.

-----> how is hexa decimal directly related to binary :
*********************************************************************************************************************************************************************************

Hexadecimal and binary are both ways to represent numbers, and they're directly related because both are base systems that are powers of two.
Hexadecimal is a base-16 system (using digits 0-9 and letters A-F to represent values 10-15), and binary is a base-2 system (using only digits 0 and 1).
The direct relation comes from the fact that one hexadecimal digit can represent exactly four binary digits (bits). This is because 16 (the base of hexadecimal) is 2 to the power of 4.
Here's a mapping of hexadecimal digits to their binary equivalents:

Hex 0 = Binary 0000
Hex 1 = Binary 0001
Hex 2 = Binary 0010
Hex 3 = Binary 0011
Hex 4 = Binary 0100
Hex 5 = Binary 0101
Hex 6 = Binary 0110
Hex 7 = Binary 0111
Hex 8 = Binary 1000
Hex 9 = Binary 1001
Hex A = Binary 1010
Hex B = Binary 1011
Hex C = Binary 1100
Hex D = Binary 1101
Hex E = Binary 1110
Hex F = Binary 1111
Because of this direct mapping, it's easy to convert between binary and hexadecimal. This is why hexadecimal is often used in programming and debugging: it's more compact than binary but can still be directly mapped to it.

----> what are fixed points and floats :
*********************************************************************************************************************************************************************************

Fixed-point and floating-point are two different ways of representing numbers in computer systems.

Fixed-point representation: In fixed-point representation, numbers are represented with a fixed number of digits before and after the decimal point. For example, if we choose to use two digits after the decimal, the number 123.456 would be represented as 123.45. Fixed-point representation is simple and fast, but it can't represent very large or very small numbers, and it can lose precision when numbers are added or subtracted.

Floating-point representation: In floating-point representation, numbers are represented in scientific notation, with a base number and an exponent. For example, the number 123.456 could be represented as 1.23456 x 10^2. Floating-point representation can handle a much larger range of numbers than fixed-point, and it maintains precision when numbers are added or subtracted. However, it's more complex and slower than fixed-point representation.

----> What are the advantages and disadvantages of using fixed-point representation versus floating-point representation in numerical computations? :
*********************************************************************************************************************************************************************************

Fixed-point and floating-point representations each have their own advantages and disadvantages when it comes to numerical computations.

<-> Fixed-point representation:

- Advantages:

Simplicity: Fixed-point arithmetic is simpler to implement and understand.
Speed: Fixed-point arithmetic is generally faster than floating-point arithmetic because it doesn't require the handling of exponents.
Precision: Fixed-point arithmetic can provide more precise results for a given number of bits when the values are within a certain range.

- disadvantages:

Limited Range: Fixed-point numbers have a limited range, determined by the number of bits allocated for the integer part.
Loss of Precision: Fixed-point arithmetic can lose precision when dealing with large numbers or when performing operations like division or multiplication.

<-> Floating-point representation:

- Advantages:

Large Range: Floating-point numbers can represent a much larger range of values than fixed-point, from very small to very large numbers.
Adaptive Precision: Floating-point numbers can maintain precision over their entire range by using a form of scientific notation.

- disadvantages:

Complexity: Floating-point arithmetic is more complex to implement and understand.
Speed: Floating-point arithmetic is generally slower than fixed-point arithmetic due to the handling of exponents.
Rounding Errors: Floating-point arithmetic can introduce rounding errors, especially when dealing with very large or very small numbers.

----> What are some strategies to mitigate the challenges of using fixed-point representation in numerical computations? :
*********************************************************************************************************************************************************************************

Mitigating the challenges of using fixed-point representation in numerical computations involves careful planning and implementation. Here are some strategies:

Range Planning: Before implementing fixed-point arithmetic, analyze the range of values your application will need to handle. This will help you determine the appropriate scaling factor and avoid issues with overflow and underflow.
Precision Management: Be aware of operations that can cause loss of precision, such as division and multiplication. Consider using techniques like rounding or truncation to manage precision loss.
Overflow and Underflow Handling: Implement checks for overflow and underflow conditions in your code. This can help you catch and handle these errors before they cause problems.
Scaling Management: Consider using functions or classes that encapsulate the complexity of scaling. This can make your code easier to read and maintain.
Use of Libraries: There are libraries available that provide fixed-point arithmetic functionality. These libraries have often already dealt with many of the challenges of fixed-point arithmetic, making them a good choice if they meet your needs.

---->  What are some common pitfalls to watch out for when using fixed-point arithmetic in numerical computations?
*********************************************************************************************************************************************************************************

When using fixed-point arithmetic in numerical computations, there are several common pitfalls to watch out for:

Overflow and Underflow: These occur when a number is too large or too small to be represented with the given number of bits. Overflow and underflow can lead to significant errors in calculations if not properly handled.
Loss of Precision: Precision can be lost in operations like division and multiplication, especially when dealing with large numbers or numbers with large decimal parts. This can lead to inaccurate results.
Incorrect Scaling: When using fixed-point numbers, you often need to manually manage the scaling factor. If this is not done correctly, it can lead to errors in your calculations.
Rounding Errors: Different rounding methods can lead to different results. It's important to choose the appropriate rounding method for your specific use case and to be aware of the potential for rounding errors.
Assuming Floating-Point Behavior: Fixed-point arithmetic does not behave the same way as floating-point arithmetic. For example, the result of dividing two fixed-point numbers is not the same as dividing the numbers and then converting to fixed-point.

----> What are some common rounding modes used in fixed-point arithmetic?
*********************************************************************************************************************************************************************************

In fixed-point arithmetic, several rounding modes are commonly used to handle the fractional part of a number when it cannot be exactly represented. Here are a few:

Round Half Up (or Round Half Away from Zero): This is the standard rounding method most people are taught in school. If the fractional part is 0.5 or greater, round up. Otherwise, round down.
Round Half Down (or Round Half Towards Zero): This is the opposite of round half up. If the fractional part is greater than 0.5, round up. If it's exactly 0.5 or less, round down.
Round Half to Even (or Bankers' Rounding): If the fractional part is exactly 0.5, round to the nearest even number. Otherwise, round normally. This method reduces bias in the rounding.
Round Towards Infinity: Always round up, regardless of the fractional part.
Round Towards Negative Infinity: Always round down, regardless of the fractional part.
Truncate (or Round Towards Zero): Simply discard the fractional part, effectively always rounding towards zero.
The choice of rounding mode can have a significant impact on the results of your computations, especially when dealing with large numbers of calculations or when precision is critical.

----> What are some considerations when choosing between fixed-point and floating-point arithmetic in numerical computations?
*********************************************************************************************************************************************************************************

When choosing between fixed-point and floating-point arithmetic for numerical computations, there are several factors to consider:

Hardware Support: Some hardware, especially in embedded systems, does not support floating-point operations, or performs them much slower than fixed-point operations. In such cases, fixed-point arithmetic might be the better choice.
Range of Values: If your computations involve very large or very small numbers, floating-point arithmetic might be more suitable due to its wider range. On the other hand, if your values are within a known range that can be accurately represented with fixed-point numbers, fixed-point arithmetic might be more efficient.
Precision Requirements: If your computations require high precision, you'll need to consider which representation will best meet your needs. Fixed-point arithmetic can provide more precise results for a given number of bits when the values are within a certain range, while floating-point arithmetic can maintain precision over a wider range.
Performance: Fixed-point arithmetic is generally faster than floating-point arithmetic, especially on hardware without dedicated floating-point units. However, the performance difference may not be noticeable in many applications.
Complexity: Floating-point arithmetic is more complex to implement and understand, especially when it comes to handling rounding errors and other special cases. If simplicity and ease of implementation are important, fixed-point arithmetic might be the better choice.







virtual function in the base class means it can be overwritten by another signature 
we can add overide in the dirrived class to signify that it should overide the virtual function in base 

/*
    Virtual destructor:
    A virtual destructor is used to free up the memory space allocated by 
    the derived class object or instance while deleting instances of the derived
    class using a base class pointer object. A base or parent class destructor
    use the virtual keyword that ensures both base class and the derived class 
    destructor will be called at run time, but it called the derived class first
    and then base class to release the space occupied by both destructors.

    Every destructor down gets called no matter what. virtual makes sure it
    starts at the top instead of the middle.

    Virtual destructors are useful when you might potentially delete an instance 
    of a derived class through a pointer to base class:
*/

/*
    C++ virtual function:
    - A C++ virtual function is a member function in the base class that you redefine
        in a derived class. It is declared using the virtual keyword.
    - It is used to tell the compiler to perform dynamic linkage or late binding
        on the function.
    - There is a necessity to use the single pointer to refer to all the objects of 
        the different classes. So, we create the pointer to the base class that refers
        to all the derived objects. But, when base class pointer contains the address of
        the derived class object, always executes the base class function. This issue
        can only be resolved by using the 'virtual' function.
    - A 'virtual' is a keyword preceding the normal declaration of a function.
    - When the function is made virtual, C++ determines which function is to be invoked
        at the runtime based on the type of the object pointed by the base class pointer.
    
*/

/* virtual means the the linkage will be dynamic not static 
    Explaination:
    At the beginning, we had a statis relution of the function calls, It means that
    during the compilation, (the compiler) we already will know which function to call.
    and for this we use the type of the variable.
    The only way for the compiler to know the behavior of my object is by knowing its type.
    and we marked it as a Character type. and the compiler will assume that its a Character.
    Therefore, it uses the Character version of the function.
    It was a static link! means that during the compilation is determined it won't change later.
    However, during the compilation let assume that we don't want it as a Warriror, but as a Wizard.
    it may point on a Warrior once and on the Wizard once based on what the user input.
    Thanks to the virtual, the resulotion of the function call wil be dynamic. and it will be
    decided at runtime.

    When we call the member function, during the execution becauese it's a function with 
    a dynamic link, it will look for the actual type of the object. It will walk 
    through the inheritance tree to find the actual type.

    A virtual member function is called a method.
    The definition of a method is a member function which resulotion will be dynamic.

Rules of Virtual Function:

    - Virtual functions must be members of some class.
    - Virtual functions cannot be static members.
    - They are accessed through object pointers.
    - They can be a friend of another class.
    - A virtual function must be defined in the base class, even though it is not used.
    - The prototypes of a virtual function of the base class and all the derived classes 
        must be identical. If the two functions with the same name but different prototypes,
        C++ will consider them as the overloaded functions.
    - We cannot have a virtual constructor, but we can have a virtual destructor

*/

//  Animal is an abstract class and cannot be instantiated. Any class that inherits from Animal must provide an implementation for makeSound, otherwise it will also be an abstract class.
